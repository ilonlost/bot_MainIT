import customtkinter as ctk
from tkinter import messagebox, scrolledtext, ttk
import requests
import subprocess
import os
import sys
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("Dark")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ctk.set_default_color_theme("blue")  # –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞

# –ê–¥—Ä–µ—Å API –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
API_URL = "http://10.10.66.70:5000"  # –£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

class BotManagerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏")
        self.geometry("800x600")  # –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.minsize(600, 400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–º—ã
        self.dark_mode = True

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
        self.top_menu_frame = ctk.CTkFrame(self, fg_color="#2E86C1")  # –°–∏–Ω–∏–π —Ñ–æ–Ω
        self.top_menu_frame.pack(pady=10, padx=10, fill="x")

        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.it_fk_button = ctk.CTkButton(self.top_menu_frame, text="IT –§–ö", command=self.open_it_fk, height=40, fg_color="#3498DB", hover_color="#1B4F72")
        self.it_fk_button.pack(side="left", padx=5, fill="x", expand=True)

        self.notifications_button = ctk.CTkButton(self.top_menu_frame, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–∏", command=self.open_notifications, height=40, fg_color="#3498DB", hover_color="#1B4F72")
        self.notifications_button.pack(side="left", padx=5, fill="x", expand=True)

        self.other_bots_button = ctk.CTkButton(self.top_menu_frame, text="–û—Å—Ç–∞–ª—å–Ω—ã–µ –±–æ—Ç—ã", command=self.open_other_bots, height=40, fg_color="#3498DB", hover_color="#1B4F72")
        self.other_bots_button.pack(side="left", padx=5, fill="x", expand=True)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        self.top_extra_frame = ctk.CTkFrame(self, fg_color="#34495E")  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        self.top_extra_frame.pack(pady=10, padx=10, fill="x")

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_button = ctk.CTkButton(self.top_extra_frame, text="üåô", command=self.toggle_theme, width=40,
                                          height=40)
        self.theme_button.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = ctk.CTkButton(self.top_extra_frame, text="‚öôÔ∏è", command=self.open_settings, width=40,
                                             height=40)
        self.settings_button.pack(side="right", padx=5)

    def open_it_fk(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IT –§–ö."""
        self.clear_window()
        self.it_fk_frame = ctk.CTkFrame(self)
        self.it_fk_frame.pack(pady=10, padx=10, fill="both", expand=True)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(self.it_fk_frame, text="–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É")
        self.status_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IT –§–ö
        self.start_button = ctk.CTkButton(self.it_fk_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start_bot, height=40)
        self.start_button.pack(pady=10, padx=10, fill="x")

        self.stop_button = ctk.CTkButton(self.it_fk_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_bot, height=40)
        self.stop_button.pack(pady=10, padx=10, fill="x")

        self.restart_button = ctk.CTkButton(self.it_fk_frame, text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=self.restart_bot, height=40)
        self.restart_button.pack(pady=10, padx=10, fill="x")

        self.log_button = ctk.CTkButton(self.it_fk_frame, text="–õ–æ–≥", command=self.show_logs, height=40)
        self.log_button.pack(pady=10, padx=10, fill="x")

    def open_notifications(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
        self.clear_window()
        self.it_fk_frame = ctk.CTkFrame(self)
        self.it_fk_frame.pack(pady=10, padx=10, fill="both", expand=True)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(self.it_fk_frame, text="–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É")
        self.status_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IT –§–ö
        self.start_button = ctk.CTkButton(self.it_fk_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start_bot, height=40)
        self.start_button.pack(pady=10, padx=10, fill="x")

        self.stop_button = ctk.CTkButton(self.it_fk_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_bot, height=40)
        self.stop_button.pack(pady=10, padx=10, fill="x")

        self.restart_button = ctk.CTkButton(self.it_fk_frame, text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=self.restart_bot, height=40)
        self.restart_button.pack(pady=10, padx=10, fill="x")

        self.log_button = ctk.CTkButton(self.it_fk_frame, text="–õ–æ–≥", command=self.show_logs, height=40)
        self.log_button.pack(pady=10, padx=10, fill="x")

    def open_other_bots(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å —Ç–∞–±–ª–∏—Ü–µ–π –±–æ—Ç–æ–≤"""
        self.clear_window()
        frame = ctk.CTkFrame(self)
        frame.pack(pady=10, padx=10, fill="both", expand=True)

        table = ttk.Treeview(frame, columns=("–ò–º—è", "–°—Å—ã–ª–∫–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"), show="headings")
        table.heading("–ò–º—è", text="–ò–º—è")
        table.heading("–°—Å—ã–ª–∫–∞", text="–°—Å—ã–ª–∫–∞")
        table.heading("–û–ø–∏—Å–∞–Ω–∏–µ", text="–û–ø–∏—Å–∞–Ω–∏–µ")

        table.pack(fill="both", expand=True)

        table.insert("", "end", values=("–ë–æ—Ç1", "http://example.com", "–û–ø–∏—Å–∞–Ω–∏–µ1"))
        table.insert("", "end", values=("–ë–æ—Ç2", "http://example.com", "–û–ø–∏—Å–∞–Ω–∏–µ2"))

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        self.clear_window()
        self.settings_frame = ctk.CTkFrame(self)
        self.settings_frame.pack(pady=10, padx=10, fill="both", expand=True)

        # –ü–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥)
        self.notes_text = scrolledtext.ScrolledText(self.settings_frame, width=100, height=10, font=("Consolas", 12))
        self.notes_text.pack(pady=10, padx=10, fill="x")
        self.notes_text.insert("1.0", "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
                                     "1. –í—ã–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python: tasklist | findstr python\n"
                                     "2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python: taskkill /f /im python.exe\n"
                                     "3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: shutdown /r /t 0\n"
                                     "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏: ping 10.10.66.10\n")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        self.cmd_entry = ctk.CTkEntry(self.settings_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...", width=600)
        self.cmd_entry.pack(pady=10, padx=10, fill="x")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        self.run_cmd_button = ctk.CTkButton(self.settings_frame, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", command=self.run_cmd, height=40)
        self.run_cmd_button.pack(pady=10, padx=10, fill="x")

        # –û–∫–Ω–æ –≤—ã–≤–æ–¥–∞ CMD
        self.cmd_output_text = scrolledtext.ScrolledText(self.settings_frame, width=100, height=20, font=("Consolas", 12))
        self.cmd_output_text.pack(pady=10, padx=10, fill="both", expand=True)
        self.cmd_output_text.configure(state="disabled")  # –ó–∞–ø—Ä–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def clear_window(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ."""
        for widget in self.winfo_children():
            if widget not in [self.top_menu_frame, self.top_extra_frame]:
                widget.destroy()

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É (—Ç–µ–º–Ω—ã–π/—Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º)."""
        self.dark_mode = not self.dark_mode
        if self.dark_mode:
            ctk.set_appearance_mode("Dark")
            self.theme_button.configure(text="Dark üåô")
        else:
            ctk.set_appearance_mode("Light")
            self.theme_button.configure(text="Light ‚òÄÔ∏è")

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API."""
        try:
            response = requests.post(f"{API_URL}/start")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", response.text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API."""
        try:
            response = requests.post(f"{API_URL}/stop")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", response.text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞: {e}")

    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API."""
        try:
            response = requests.post(f"{API_URL}/restart")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", response.text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –±–æ—Ç–∞."""
        try:
            log_file = "logs.txt"
            if os.path.exists(log_file):
                with open(log_file, "r") as file:
                    log_content = file.read()
                    messagebox.showinfo("–õ–æ–≥", log_content)
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥: {e}")

    def run_cmd(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        command = self.cmd_entry.get()
        if command:
            try:
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                self.cmd_output_text.configure(state="normal")
                self.cmd_output_text.delete("1.0", "end")
                self.cmd_output_text.insert("1.0", result.stdout)
                self.cmd_output_text.configure(state="disabled")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")

if __name__ == "__main__":
    app = BotManagerApp()
    app.mainloop()