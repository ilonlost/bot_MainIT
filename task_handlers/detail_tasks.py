import logging
from telebot import types
from conn.conn import bot
from conn.conn import get_db_connection
from task_handlers.menu import main_menu





@bot.message_handler(func=lambda message: message.text == "üìã –î–µ—Ç–∞–ª–∏")
def details_handler(message):
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, task_name FROM tasks")
        tasks = cursor.fetchall()

    if tasks:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        for task in tasks:
            task_id, task_name = task
            markup.add(f"{task_id} - {task_name}")  # –ö–Ω–æ–ø–∫–∏ —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, show_task_details)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        main_menu(message)


def show_task_details(message):
    task_id_and_name = message.text.strip()
    task_id = task_id_and_name.split(" ")[0]

    task_details = fetch_task_details(task_id)

    if task_details:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            
            cursor.execute("SELECT username FROM users WHERE telegram_id = ?", (task_details['creator'],))
            creator_username = cursor.fetchone()
            creator_text = creator_username[0] if creator_username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            
            assignee_ids = task_details['assignee'].split(", ")
            cursor.execute(f"SELECT username FROM users WHERE telegram_id IN ({', '.join(['?'] * len(assignee_ids))})", assignee_ids)
            assignee_usernames = [row[0] for row in cursor.fetchall()]
            assignee_text = ", ".join(assignee_usernames) if assignee_usernames else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        details_text = (
            f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_details['task_name']}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {task_details['task_description']}\n"
            f"üîë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task_details['task_priority']}\n"
            f"üîñ –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_details['task_type']}\n"
            f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {task_details['task_status']}\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_text}\n"
            f"üë• –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {assignee_text}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
            f"1. {task_details['comment1']}\n"
            f"2. {task_details['comment2']}\n"
            f"3. {task_details['comment3']}\n"
        )
        bot.send_message(message.chat.id, details_text)
    else:
        bot.send_message(message.chat.id, "üö´ –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    main_menu(message)


def fetch_task_details(task_id):
    try:
        task_id = int(task_id)
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT task_name, description, priority, type, status, creator, assignee, comment1, comment2, comment3
                FROM tasks WHERE id = ?
            """, (task_id,))
            task = cursor.fetchone()

            if task:
                return {
                    "task_name": task[0],
                    "task_description": task[1],
                    "task_priority": task[2],
                    "task_type": task[3],
                    "task_status": task[4],
                    "creator": task[5],
                    "assignee": task[6],
                    "comment1": task[7],
                    "comment2": task[8],
                    "comment3": task[9]
                }
            else:
                return None
    except ValueError:
        logging.error("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
        return None
