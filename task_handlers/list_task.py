import logging
from task_handlers.delete_pair import delete_expired_message_pairs
from task_handlers.delete_pair import delete_previous_list_messages
from task_handlers.delete_pair import save_message_pair
from conn.conn import get_db_connection
from conn.conn import bot
from telebot import types




def display_tasks(message, filter_type=None):
    try:
        
        delete_expired_message_pairs(message.chat.id)

        
        delete_previous_list_messages(message.chat.id)

        with get_db_connection() as conn:
            cursor = conn.cursor()

            
            if filter_type == "–¢–µ–∫—É—â–∏–µ":
                cursor.execute(
                    "SELECT id, task_name, type, priority, status FROM tasks WHERE type = '–¢–µ–∫—É—â–∞—è' AND status != '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
            elif filter_type == "–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ":
                cursor.execute(
                    "SELECT id, task_name, type, priority, status FROM tasks WHERE type = '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è' AND status != '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
            elif filter_type == "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
                cursor.execute("SELECT id, task_name, type, priority, status FROM tasks WHERE status = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'")
            else:
                cursor.execute("SELECT id, task_name, type, priority, status FROM tasks")

            tasks = cursor.fetchall()

            
            if tasks:
                project_tasks = []
                current_tasks = []
                completed_tasks = []

                for task in tasks:
                    task_id, task_name, task_type, task_priority, status = task
                    formatted_priority = format_priority(task_priority)

                    task_text = f"- {formatted_priority} ID: {task_id} –ó–∞–¥–∞—á–∞: {task_name} "

                    if "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in status:
                        completed_tasks.append(task_text)
                    elif task_type.lower() == "–ø—Ä–æ–µ–∫—Ç–Ω–∞—è":
                        project_tasks.append(task_text)
                    elif task_type.lower() == "—Ç–µ–∫—É—â–∞—è":
                        current_tasks.append(task_text)

                
                task_list_message = "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:\n\n"

                if project_tasks:
                    task_list_message += "         –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
                    task_list_message += "\n".join(project_tasks) + "\n\n"

                if current_tasks:
                    task_list_message += "         –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n"
                    task_list_message += "\n".join(current_tasks) + "\n\n"


                
                sent_message = bot.send_message(message.chat.id, task_list_message)
                save_message_pair(message.chat.id, bot_message_id=sent_message.message_id,
                                  user_message_id=message.message_id)
            else:
                sent_message = bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    
    prompt_main_menu(message)



def prompt_main_menu(message):
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìã –°–ø–∏—Å–∫–∏", "‚öôÔ∏è –°–µ—Ä–≤–∏—Å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    
    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)



def handle_repeated_selection(chat_id):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT bot_message_id FROM message_pairs
                WHERE chat_id = ? AND bot_message_id IS NOT NULL
                ORDER BY id DESC LIMIT 1
            """, (chat_id,))
            last_message = cursor.fetchone()

            if last_message:
                bot.delete_message(chat_id, last_message[0])
                cursor.execute("""
                    DELETE FROM message_pairs
                    WHERE chat_id = ? AND bot_message_id = ?
                """, (chat_id, last_message[0]))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: {str(e)}")



def format_priority(priority):
    if priority == "üî¥ –í—ã—Å–æ–∫–∏–π":
        return "üî¥"
    elif priority == "üü° –°—Ä–µ–¥–Ω–∏–π":
        return "üü°"
    else:
        return "üü¢"
