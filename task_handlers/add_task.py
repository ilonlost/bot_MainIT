import logging
from task_handlers.delete_pair import delete_previous_interaction
from task_handlers.delete_pair import save_message_pair
from task_handlers.menu import back_menu_add
from conn.conn import bot
from conn.conn import get_db_connection
from conn.conn import get_user_by_telegram_id
from telebot import types


def add_task_menu(message):
    delete_previous_interaction(message.chat.id, message.message_id)

    sent_message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
    bot.register_next_step_handler(sent_message, get_task_name, sent_message.message_id)


def get_task_name(message, previous_bot_message_id):
    delete_previous_interaction(message.chat.id, previous_bot_message_id)

    task_name = message.text
    sent_message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
    bot.register_next_step_handler(sent_message, get_task_description, sent_message.message_id, task_name)


def get_task_description(message, previous_bot_message_id, task_name):
    delete_previous_interaction(message.chat.id, previous_bot_message_id)

    description = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–¢–µ–∫—É—â–∞—è", "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è")
    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
    bot.register_next_step_handler(sent_message, get_task_type, sent_message.message_id, task_name, description)


def get_task_type(message, previous_bot_message_id, task_name, description):
    delete_previous_interaction(message.chat.id, previous_bot_message_id)

    task_type = message.text
    if task_type not in ["–¢–µ–∫—É—â–∞—è", "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è"]:
        sent_message = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
        bot.register_next_step_handler(sent_message, get_task_type, sent_message.message_id, task_name, description)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üî¥ –í—ã—Å–æ–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π", "üü¢ –ù–∏–∑–∫–∏–π")
    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
    bot.register_next_step_handler(sent_message, get_responsible_user, sent_message.message_id, task_name, description, task_type)


def get_responsible_user(message, previous_bot_message_id, task_name, description, task_type):
    delete_previous_interaction(message.chat.id, previous_bot_message_id)

    priority = message.text
    if priority not in ["üî¥ –í—ã—Å–æ–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π", "üü¢ –ù–∏–∑–∫–∏–π"]:
        sent_message = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)
        bot.register_next_step_handler(sent_message, get_responsible_user, sent_message.message_id, task_name,
                                       description, task_type)
        return

    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id, username, group_access FROM users")
            users = cursor.fetchall()

        group_access = next((user[2] for user in users if user[0] == message.from_user.id), "user")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        
        for user in users:
            markup.add(user[1])  

        markup.add("–ì–æ—Ç–æ–≤–æ")  
        sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö (–Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å):",
                                        reply_markup=markup)
        save_message_pair(message.chat.id, bot_message_id=sent_message.message_id, user_message_id=message.message_id)

        #
        bot.register_next_step_handler(sent_message, collect_responsibles, task_name, description, task_type, priority,
                                       users, [])

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def collect_responsibles(message, task_name, description, task_type, priority, users, selected_users):
    responsible_username = message.text.strip()

    if responsible_username == "–ì–æ—Ç–æ–≤–æ":
        if not selected_users:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        save_task(message, None, task_name, description, task_type, priority, "admin", users, selected_users)
        return

    user = next((user for user in users if user[1] == responsible_username), None)
    if user and user[1] not in selected_users:
        selected_users.append(user[1])  
        bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {responsible_username}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ.")

    bot.register_next_step_handler(message, collect_responsibles, task_name, description, task_type, priority, users, selected_users)


def save_task(message, previous_bot_message_id, task_name, description, task_type, priority, group_access, users, selected_usernames):
    responsible_ids = [user[0] for user in users if user[1] in selected_usernames]
    responsible_user_str = ", ".join(selected_usernames)

    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO tasks (task_name, description, priority, type, status, creator, assignee, comment1, comment2, comment3)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (task_name, description, priority, task_type, "‚è≥ –í —Ä–∞–±–æ—Ç–µ", message.from_user.id, ", ".join(map(str, responsible_ids)), "", "", ""))
            conn.commit()

            cursor.execute("SELECT SCOPE_IDENTITY()")
            task_id = cursor.fetchone()[0]

        notify_assignees(responsible_ids, task_name, description, priority, task_type, task_id)
       # bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        back_menu_add(message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def notify_assignees(assignee_ids, task_name, description, priority, task_type, task_id):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏."""
    for assignee_id in assignee_ids:
        try:
            task_details_text = (
                f"üë• –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üîë –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üîñ –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}\n"
                f"üìã –ò–î–ò –î–ï–õ–ê–¢–¨"
            )
            bot.send_message(assignee_id, task_details_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {assignee_id}: {str(e)}", exc_info=True)
