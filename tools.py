import logging
import subprocess
import time
from task_conn.conn import bot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ñ–µ—Ä–º—ã RDS
RDS_SERVERS = [
    "11-vm-rdcb01",  # –ë—Ä–æ–∫–µ—Ä 1
    "11-vm-rdcb02",  # –ë—Ä–æ–∫–µ—Ä 2
    "11-vm-rddb01",  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    "11-vm-rdfs01",  # –•—Ä–∞–Ω–∏–ª–∏—â–µ
    "11-vm-rds01",   # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 1
    "11-vm-rds02",   # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 2
    "11-vm-term01",  # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 3
    "11-vm-term02",  # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 4
    "11-vm-term03",  # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 5
    "11-vm-term04",  # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 6
    "11-vm-term05",  # –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 7
]

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
USERNAME = "agrohold.ru\\adm.kalinin"
PASSWORD = "Yfkbxybr6838#"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
LOG_FILE = "rds_logs.txt"



def get_server_status(server_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        command = [
            "powershell", "-Command",
            f"Test-NetConnection -ComputerName {server_name} -InformationLevel Quiet"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return result.returncode == 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {str(e)}", exc_info=True)
        return False

def log_message(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥."""
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def reboot_server(server_name):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä."""
    try:
        command = [
            "powershell", "-Command",
            f"$Username = '{USERNAME}'; "
            f"$Password = '{PASSWORD}'; "
            f"$SecurePassword = ConvertTo-SecureString -AsPlainText $Password -Force; "
            f"$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword; "
            f"Restart-Computer -ComputerName {server_name} -Force -Credential $Credential"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return result.returncode == 0, result.stderr
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {str(e)}", exc_info=True)
        return False, str(e)

def get_connected_users():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        command = [
            "powershell", "-Command",
            f"$Username = '{USERNAME}'; "
            f"$Password = '{PASSWORD}'; "
            f"$SecurePassword = ConvertTo-SecureString -AsPlainText $Password -Force; "
            f"$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword; "
            f"Get-RDUserSession | Select-Object Username, HostServer, SessionId, ConnectionState"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        users = []
        for line in result.stdout.splitlines():
            if "Username" not in line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                parts = line.split()
                if len(parts) >= 4:
                    users.append({
                        "username": parts[0],
                        "server": parts[1],
                        "session_id": parts[2],
                        "connection_state": parts[3]
                    })
        return users
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
        return []

def get_server_status(server_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        command = [
            "powershell", "-Command",
            f"Test-NetConnection -ComputerName {server_name} -InformationLevel Quiet"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return result.returncode == 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {str(e)}", exc_info=True)
        return False

def get_server_load(server_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¶–ü –∏ –û–ó–£ —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        command = [
            "powershell", "-Command",
            f"$Username = '{USERNAME}'; "
            f"$Password = '{PASSWORD}'; "
            f"$SecurePassword = ConvertTo-SecureString -AsPlainText $Password -Force; "
            f"$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword; "
            f"Invoke-Command -ComputerName {server_name} -Credential $Credential -ScriptBlock {{ "
            f"Get-Counter '\\Processor(_Total)\\% Processor Time' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue; "
            f"Get-Counter '\\Memory\\Available MBytes' | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue "
            f"}}"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        cpu_usage, ram_available = result.stdout.strip().split()
        return float(cpu_usage), float(ram_available)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {str(e)}", exc_info=True)
        return None, None

def is_host_in_farm(server_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç –≤ —Ñ–µ—Ä–º–µ."""
    try:
        command = [
            "powershell", "-Command",
            f"$Username = '{USERNAME}'; "
            f"$Password = '{PASSWORD}'; "
            f"$SecurePassword = ConvertTo-SecureString -AsPlainText $Password -Force; "
            f"$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword; "
            f"Invoke-Command -ComputerName {server_name} -Credential $Credential -ScriptBlock {{ "
            f"(Get-RDServer -Role RDS-RD-SERVER).Server"
            f"}}"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return server_name in result.stdout
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–∞ –≤ —Ñ–µ—Ä–º–µ: {str(e)}", exc_info=True)
        return False

def get_user_count_per_server():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ."""
    users = get_connected_users()
    user_count = {}
    for server in RDS_SERVERS:
        user_count[server] = 0
    for user in users:
        if user["server"] in user_count:
            user_count[user["server"]] += 1
    return user_count

def log_message(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥."""
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")


@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
def tools_menu_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("RDS", "–ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "RDS")
def rds_menu_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º—ã RDS", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RDS", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RDS:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
def test_server_reboot_handler(message):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ 11-vm-DVLM01...")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        success, error = reboot_server("11-vm-DVLM01")
        if success:
            bot.send_message(message.chat.id, "‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:\n{error}")

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log_message("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º—ã RDS")
def rds_reboot_handler(message):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Ñ–µ—Ä–º—ã RDS...")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = ["11-vm-rdcb01", "11-vm-rdcb02", "11-vm-rddb01", "11-vm-rdfs01", "11-vm-rds01", "11-vm-rds02", "11-vm-term01", "11-vm-term02", "11-vm-term03", "11-vm-term04" ,"11-vm-term05", "11-vm-ecoplan01"]
        for server in servers:
            success, error = reboot_server(server)
            if success:
                bot.send_message(message.chat.id, f"‚úÖ –°–µ—Ä–≤–µ—Ä {server} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
            else:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server}:\n{error}")

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log_message("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º—ã RDS –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        bot.send_message(message.chat.id, "‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º—ã RDS –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ñ–µ—Ä–º—ã RDS: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Ñ–µ—Ä–º—ã RDS.")

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RDS")
def rds_stats_handler(message):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RDS:\n\n"
        stats_message += "| –°–µ—Ä–≤–µ—Ä          | –°—Ç–∞—Ç—É—Å   | –¶–ü (%) | –û–ó–£ (MB) | –í —Ñ–µ—Ä–º–µ |\n"
        stats_message += "|-----------------|----------|--------|----------|---------|\n"
        for server in RDS_SERVERS:
            status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if get_server_status(server) else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            cpu_usage, ram_available = get_server_load(server)
            in_farm = "‚ùå" if is_host_in_farm(server) else "‚úÖ"
            if cpu_usage is not None and ram_available is not None:
                stats_message += f"| {server:15} | {status:8} | {cpu_usage:6.2f} | {ram_available:8.2f} | {in_farm:7} |\n"
            else:
                stats_message += f"| {server:15} | {status:8} |   N/A   |    N/A    | {in_farm:7} |\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot.send_message(message.chat.id, f"```\n{stats_message}\n```", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RDS: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RDS.")

@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def users_handler(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        user_count = get_user_count_per_server()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for server, count in user_count.items():
            if count > 0:
                markup.add(f"{server} ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        markup.add("–ù–∞–∑–∞–¥")
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_server_selection)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def process_server_selection(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        server_name = message.text.split(" (")[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        users = get_connected_users()
        server_users = [user for user in users if user["server"] == server_name]

        if not server_users:
            bot.send_message(message.chat.id, f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_name} –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for user in server_users:
            markup.add(f"{user['username']} ({user['session_id']})")
        markup.add("–ù–∞–∑–∞–¥")
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_user_selection, server_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞.")

def process_user_selection(message, server_name):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Å–µ—Å—Å–∏–∏
        user_info = message.text.split(" (")
        username = user_info[0]
        session_id = user_info[1].rstrip(")")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        users = get_connected_users()
        user = next((u for u in users if u["username"] == username and u["session_id"] == session_id), None)

        if user:
            user_message = f"üë§ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            user_message += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['username']}\n"
            user_message += f"–°–µ—Ä–≤–µ—Ä: {user['server']}\n"
            user_message += f"ID —Å–µ—Å—Å–∏–∏: {user['session_id']}\n"
            user_message += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {user['connection_state']}\n"
            bot.send_message(message.chat.id, user_message)
        else:
            bot.send_message(message.chat.id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def disconnect_user_handler(message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_connected_users()
        if not users:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for user in users:
            markup.add(f"{user['username']} ({user['server']})")
        markup.add("–ù–∞–∑–∞–¥")
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_disconnect_user)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def process_disconnect_user(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Ä–≤–µ—Ä
        user_info = message.text.split(" (")
        username = user_info[0]
        server_name = user_info[1].rstrip(")")

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command = [
            "powershell", "-Command",
            f"$Username = '{USERNAME}'; "
            f"$Password = '{PASSWORD}'; "
            f"$SecurePassword = ConvertTo-SecureString -AsPlainText $Password -Force; "
            f"$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword; "
            f"Invoke-Command -ComputerName {server_name} -Credential $Credential -ScriptBlock {{ "
            f"Invoke-RDUserLogoff -HostServer {server_name} -User {username} -Force "
            f"}}"
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode == 0:
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_name}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n{result.stderr}")

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_name}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", exc_info=True)
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_handler(message):
    main_menu(message)

def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ó–∞–¥–∞—á–∏", "–°–∫–ª–∞–¥")
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True, timeout=30)
